// Decompiled by DJ v3.12.12.96 Copyright 2011 Atanas Neshkov  Date: 09.12.2013 19:04:21
// Home Page: http://members.fortunecity.com/neshkov/dj.html  http://www.neshkov.com/dj.html - Check often for new version!
// Decompiler options: packimports(3) 

package siz.servercom;

import java.util.*;
import java.util.regex.Pattern;
import siz.*;
import siz.com.RS232;
import siz.disk.DiskData;
import siz.disk.SingleDiskImage;
import siz.menu.*;
import siz.paint.PaintTools;
import siz.print.PrintHandler;

// Referenced classes of package siz.servercom:
//            OSConnection

public class ServerMsgHandling
{

    public ServerMsgHandling()
    {
    }

    public static StringBuffer getServerMsg(Controller controller, StringBuffer stringbuffer)
    {
        try
        {
            int i = stringbuffer.length();
            stringbuffer = getTagAttributeInnen(stringbuffer);
            if(i != stringbuffer.length())
                analyseElement(controller, (String)attribute.get("tagname"), (String)attribute.get("content"));
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
        return stringbuffer;
    }

    public static String getFirstTag(String s)
    {
        int i = 0;
        int j = 0;
        if((i = s.indexOf("<")) != -1 && (j = s.indexOf(">")) != -1 && i < j)
            return s.substring(i, j + 1).trim();
        else
            return null;
    }

    private static StringBuffer getTagAttributeInnen(StringBuffer stringbuffer)
    {
        attribute.clear();
        String s = "";
        String s1 = "";
        String s2 = getFirstTag(stringbuffer.toString());
        String s3 = null;
        if(null != s2)
        {
            s3 = new String(s2);
            s2 = s2.substring(1).trim();
            String as[] = s2.split(" ");
            s2 = as[0].endsWith(">") ? as[0].substring(0, as[0].length() - 1) : as[0];
            attribute.put("tagname", s2);
            Pattern pattern = Pattern.compile((new StringBuilder()).append("(</)+.?(").append(s2).append(")+.?[>]+").toString());
            s1 = Tools.getRegExMatch(stringbuffer.toString(), pattern);
            Log.debug("ServerMsgHandling", (new StringBuilder()).append("EndTag: ").append(s1).toString());
            if(null == s1)
                if(stringbuffer.indexOf(">") != -1)
                {
                    if(stringbuffer.charAt(stringbuffer.indexOf(">") - 1) == '/')
                        s1 = "/>";
                    else
                        return stringbuffer;
                } else
                {
                    return stringbuffer;
                }
        } else
        {
            return stringbuffer;
        }
        int i = stringbuffer.indexOf(s1) + s1.length();
        s = stringbuffer.substring(stringbuffer.indexOf(s3), i);
        Log.debug("ServerMsgHandling", (new StringBuilder()).append("XML-Block: ").append(s).toString());
        stringbuffer = new StringBuffer(stringbuffer.substring(i));
        String s4 = s3;
        for(String s5 = ""; (s5 = Tools.getRegExMatch(s4.toString(), attributePattern)) != null;)
        {
            s5 = s5.trim();
            String as1[] = s5.split("=");
            attribute.put(as1[0].trim(), as1[1].replace("\"", "").trim());
            s4 = s4.replace(s5, "");
        }

        String s6 = s.replaceFirst(s3, "");
        s6 = s6.replaceFirst(s1, "");
        s6 = s6.trim();
        Log.debug("ServerMsgHandling", (new StringBuilder()).append("Content: ").append(s6).toString());
        attribute.put("content", s6);
        return stringbuffer;
    }

    private static void handleMessageMessage(Controller controller, String s)
    {
        String s1 = "";
        if(null != (s1 = (String)attribute.get("type")) && s1.equalsIgnoreCase("rangelink"))
        {
            Shooter.setSid((String)attribute.get("shootersid"));
            Shooter.setName(Tools.replaceUml(s));
            Log.info("ServerMsgHandling", (new StringBuilder()).append("Set shooter: ").append(Shooter.getSid()).append(" : ").append(Shooter.getName()).toString());
        }
        controller.getMessages().setServerMessage(s);
    }

    private static void analyseElement(Controller controller, String s, String s1)
    {
        if(null == s || s.length() == 0)
            return;
        if(s.equalsIgnoreCase("command"))
        {
            handleCommands(controller, s1);
            return;
        }
        if(s.equalsIgnoreCase("showoscleanstate"))
        {
            controller.getSettingsHandler().setShowOSCleanState(Tools.parseBoolean(s1, true));
            controller.getDiskPanel().repaint();
        } else
        if(s.equalsIgnoreCase("soshott"))
            controller.getSoShots().addSoShot((String)attribute.get("value"), (String)attribute.get("color"));
        else
        if(s.equalsIgnoreCase("sototals"))
            controller.getSoShots().setSoResults(s1);
        else
        if(s.equalsIgnoreCase("printmode"))
            controller.getSettingsHandler().setPrintSettingsType(Tools.parseInt(s1, 1));
        else
        if(s.equalsIgnoreCase("contaminatedlevel"))
        {
            controller.getSettingsHandler().setContaminatedLevel(Tools.parseInt(s1, 1));
            controller.getDiskPanel().repaint();
        } else
        if(s.equalsIgnoreCase("shotstopaint"))
            controller.getDiskPanel().setShotsToPaint(s1);
        else
        if(s.equalsIgnoreCase("markasshoted"))
            controller.getMenuHandler().markAsShoted(s1);
        else
        if(s.equalsIgnoreCase("message"))
            handleMessageMessage(controller, Tools.replaceUml(s1));
        else
        if(s.equalsIgnoreCase("message2"))
        {
            controller.getMessages().setServerMessage2(Tools.replaceUml(s1));
        } else
        {
            if(s.equalsIgnoreCase("popupmessage"))
            {
                controller.getMessages().setPopupMessage(Tools.replaceUml(s1), true);
                return;
            }
            if(s.equalsIgnoreCase("menupoint"))
                handleNeuMenuItem(controller, s1);
            else
            if(s.equalsIgnoreCase("diskdefinition"))
                DiskData.parseDiskDefXML(s1);
            else
            if(s.equalsIgnoreCase("dropmenu"))
                dropMenuItem(controller, s1);
            else
            if(s.equalsIgnoreCase("shot"))
                setShot(controller, s1);
            else
            if(s.equalsIgnoreCase("setactivemenu"))
            {
                controller.getMenuHandler().setMenuID(s1);
                if(!controller.getSequenzHandler().isCompetitionRunning())
                {
                    controller.getSequenzHandler().setFinished(false);
                    controller.getMenuPanel().repaint();
                }
                controller.getSequenzHandler().setMenuItem(controller.getMenuHandler().getSelectedMenuItem());
            } else
            if(s.equalsIgnoreCase("shotingrange"))
            {
                if(null != s1 && s1.length() > 0)
                    try
                    {
                        controller.getSettingsHandler().setStandplatz(Integer.parseInt(s1));
                        Ressorcen.saveSettings();
                    }
                    catch(Exception exception)
                    {
                        Log.error("ServerMsgHandling", (new StringBuilder()).append("Parse Standplatz ").append(s1).toString(), exception);
                    }
            } else
            if(s.equalsIgnoreCase("timeleft"))
            {
                if(null != s1 && s1.length() > 0)
                    try
                    {
                        controller.getSequenzHandler().setTimeLeft(Integer.parseInt(s1));
                        Ressorcen.saveSettings();
                    }
                    catch(Exception exception1)
                    {
                        Log.error("ServerMsgHandling", (new StringBuilder()).append("Parse TimeLeft ").append(s1).toString(), exception1);
                    }
            } else
            if(s.equalsIgnoreCase("cornercolor"))
                PaintTools.setCornerColor(s1);
        }
        controller.getMessages().setPopupMessageRepaint(null);
    }

    private static void handleNeuMenuItem(Controller controller, String s)
    {
        Vector vector = new Vector();
        String s1 = "menupoint";
        for(Iterator iterator = attribute.keySet().iterator(); iterator.hasNext();)
        {
            String s3 = (String)iterator.next();
            attribute.get(s3);
            s1 = (new StringBuilder()).append(s1).append("|").append(s3).append("=").append((String)attribute.get(s3)).toString();
        }

        vector.addElement(s1);
        Log.debug("ServerMsgHandling", s1);
        Log.debug("ServerMsgHandling", s);
        String s2;
        for(; s.trim().length() > 0; Log.debug("ServerMsgHandling", s2))
        {
            s = getTagAttributeInnen(new StringBuffer(s)).toString();
            s2 = "menupoint>menuitem";
            for(Iterator iterator1 = attribute.keySet().iterator(); iterator1.hasNext();)
            {
                String s4 = (String)iterator1.next();
                attribute.get(s4);
                s2 = (new StringBuilder()).append(s2).append("|").append(s4).append("=").append((String)attribute.get(s4)).toString();
            }

            vector.addElement(s2);
        }

        controller.getMenuHandler().menuParser.parseMenuLine(vector);
        if(null != controller.getMenuPanel())
        {
            controller.getMenuHandler().repaintMenuImage();
            controller.getMenuPanel().repaint();
        }
    }

    private static void dropMenuItem(Controller controller, String s)
    {
        if(null != s && s.trim().length() > 0)
            try
            {
                controller.getMenuHandler().dropMenuPoint(Integer.parseInt(s.trim()));
            }
            catch(Exception exception)
            {
                Log.error("ServerMsgHandling", (new StringBuilder()).append("Drop Menupoint ").append(s.trim()).toString(), exception);
            }
    }

    public static void setShot(Controller controller, String s)
    {
        Shot shot = null;
        try
        {
            shot = new Shot(controller.getSettingsHandler().getShotID(), Tools.parseInt(null == attribute.get("x") ? "0" : ((String)attribute.get("x")).toString()), Tools.parseInt(null == attribute.get("y") ? "0" : ((String)attribute.get("y")).toString()), Tools.parseDouble(null == attribute.get("teiler") ? "0" : ((String)attribute.get("teiler")).toString()), Tools.parseInt(s), null == attribute.get("disktyp") ? null : DiskData.getDiskByName(((String)attribute.get("disktyp")).toString()), System.currentTimeMillis(), Tools.parseBoolean((String)attribute.get("ishot"), false), !Tools.parseBoolean((String)attribute.get("ishot"), false), 1, Tools.parseBoolean((String)attribute.get("dummy"), false));
        }
        catch(Exception exception)
        {
            Log.error("ServerMsgHandling", "Set Shot Error", exception);
        }
        if(null != shot)
        {
            int i = -1;
            try
            {
                i = Tools.parseInt(null == attribute.get("shot") ? "0" : ((String)attribute.get("shot")).toString());
            }
            catch(Exception exception1)
            {
                Log.error("ServerMsgHandling", (new StringBuilder()).append("Parse Schussnummer Fehler: ").append((String)attribute.get("shot")).toString(), exception1);
            }
            shot.setShotID(i);
            controller.getShotHandler().addShot(shot);
        }
        OSConnection.sendShot(shot);
    }

    private static void handleCommands(Controller controller, String s)
    {
        Log.debug("ServerMsgHandling", (new StringBuilder()).append("servercommand: ").append(s).toString());
        if(null == controller.getDiskPanel() || null == controller.getMenuPanel())
        {
            Log.warn("ServerMsgHandling", "Panels noch nicht initialisiert - ignoriere Servermsg!");
            return;
        }
        String s1 = null;
        if(null != (s1 = (String)attribute.get("cmd")))
            if(s1.equalsIgnoreCase("ip"))
            {
                String s2 = (String)attribute.get("value");
                if(null != s2 && s2.indexOf('.') != -1)
                {
                    s2 = s2.trim();
                    controller.getOSConnection().setServerip(s2);
                }
            } else
            {
                if(s1.equalsIgnoreCase("shootoffmode"))
                {
                    controller.getSettingsHandler().setShootoffmode("on".equalsIgnoreCase((String)attribute.get("value")));
                    controller.getMenuPanel().repaint();
                    return;
                }
                if(s1.equalsIgnoreCase("tlight"))
                {
                    SingleDiskImage.setDiskColor((String)attribute.get("value"));
                    try
                    {
                        SingleDiskImage.repaintDisk();
                        controller.getDiskPanel().repaint();
                    }
                    catch(Exception exception) { }
                    return;
                }
                if(s1.equalsIgnoreCase("soshott"))
                {
                    String s3 = (String)attribute.get("value");
                    if("clearShots".equalsIgnoreCase(s3))
                        controller.getSoShots().clearShots();
                    else
                    if("clearResults".equalsIgnoreCase(s3))
                        controller.getSoShots().clearResults();
                    else
                    if("clearAll".equalsIgnoreCase(s3))
                        controller.getSoShots().clearAll();
                    return;
                }
            }
        if(s.equalsIgnoreCase("clear_to_Startsettings"))
        {
            controller.getSettingsHandler().setWarmSelfstart(false);
            controller.getSettingsHandler().setHotSelfstart(false);
            controller.getSettingsHandler().setSmartCardMode(false);
            controller.getSiz().resetAll();
            controller.getMessages().clearAllMessages();
            controller.getMenuHandler().loadMenu();
            controller.getMenuHandler().cleanUpAfterCompetition();
        } else
        if(s.equalsIgnoreCase("preisschiessen_logedin"))
        {
            controller.getMenuHandler().setPreisschiessenLogedIn(true);
            controller.getDiskPanel().repaint();
        } else
        if(s.equalsIgnoreCase("preisschiessen_logedout"))
        {
            controller.getMenuHandler().setPreisschiessenLogedIn(false);
            controller.getDiskPanel().repaint();
        } else
        if(s.equalsIgnoreCase("preisschiessen_off"))
        {
            controller.getMenuHandler().setPreisschiessenLogedIn(false);
            controller.getSettingsHandler().setPreisschiessen(false);
            controller.getDiskPanel().repaint();
        } else
        if(s.equalsIgnoreCase("preisschiessen"))
        {
            controller.getSettingsHandler().setPreisschiessen(true);
            controller.getMenuHandler().repaintMenuImage();
            controller.getMenuPanel().repaint();
            controller.getDiskPanel().repaint();
        } else
        if(s.equalsIgnoreCase("closed_for_smartcard"))
            controller.getSmartCard().setCardPath(null == attribute.get("path") ? "" : ((String)attribute.get("path")).toString());
        else
        if(s.equalsIgnoreCase("set_server_mode"))
        {
            Log.debug("ServerMsgHandling", "SetServerMode");
            controller.getSettingsHandler().setServerMode(true);
            controller.getMessages().setMessage(Ressorcen.get("serverWaitMsg"));
        } else
        if(s.equalsIgnoreCase("set_client_mode"))
        {
            controller.getSettingsHandler().setServerMode(false);
            controller.getDiskPanel().repaint();
        } else
        if(s.equalsIgnoreCase("print_current_competition"))
            new PrintHandler(controller, true);
        else
        if(s.equalsIgnoreCase("competition_hot_start"))
        {
            controller.getSettingsHandler().setWarmSelfstart(false);
            controller.getSettingsHandler().setHotSelfstart(false);
            if(controller.getSequenzHandler().isLigaPause())
            {
                controller.getSequenzHandler().continueLigaPause();
            } else
            {
                controller.getMessages().setMessage(null);
                controller.getSequenzHandler().startHotSequenze(null == attribute.get("time") ? null : ((String)attribute.get("time")).toString(), null == attribute.get("countdown") ? null : ((String)attribute.get("countdown")).toString());
            }
        } else
        {
            if(s.equalsIgnoreCase("competition_hot_selfstart"))
            {
                controller.getMessages().setPopupMessage(Ressorcen.get("hotselfstartmessage", "SIZ konfiguriert und bereit"), true);
                controller.getSettingsHandler().setHotSelfstart(true);
                controller.getSettingsHandler().setWarmSelfstart(false);
                controller.getSettingsHandler().setHotStartParams(null == attribute.get("time") ? null : ((String)attribute.get("time")).toString(), null == attribute.get("countdown") ? null : ((String)attribute.get("countdown")).toString());
                return;
            }
            if(s.equalsIgnoreCase("competition_warmup_start"))
            {
                controller.getMessages().setMessage(null);
                controller.getSettingsHandler().setWarmSelfstart(false);
                controller.getSettingsHandler().setHotSelfstart(false);
                controller.getSequenzHandler().startWarmupSequenz();
                controller.getMessages().setMessage(Ressorcen.get("smdurchgangstart"));
            } else
            {
                if(s.equalsIgnoreCase("competition_warmup_selfstart"))
                {
                    controller.getMessages().setPopupMessage(Ressorcen.get("warmselfstartmessage", "SIZ konfiguriert und bereit"), true);
                    controller.getSettingsHandler().setWarmSelfstart(true);
                    controller.getSettingsHandler().setHotSelfstart(false);
                    return;
                }
                if(s.equalsIgnoreCase("competition_stop"))
                {
                    controller.getSettingsHandler().setWarmSelfstart(false);
                    controller.getSettingsHandler().setHotSelfstart(false);
                    controller.getSequenzHandler().stopSequenz();
                    controller.getMessages().setMessage(Ressorcen.get("smdurchgangcancel"));
                } else
                if(s.equalsIgnoreCase("competition_hold"))
                {
                    controller.getSequenzHandler().setPaused(true);
                    controller.getMessages().setMessage(Ressorcen.get("smdurchgangstop"));
                } else
                if(s.equalsIgnoreCase("competition_resume"))
                {
                    controller.getSequenzHandler().setPaused(false);
                    controller.getMessages().setMessage(Ressorcen.get("smdurchgangcont"));
                } else
                if(s.equalsIgnoreCase("kingshoton"))
                {
                    controller.getSettingsHandler().setKingShot(true);
                    controller.getDiskPanel().repaint();
                    controller.getMenuHandler().repaintShotImage();
                    controller.getMenuPanel().repaint();
                } else
                if(s.equalsIgnoreCase("kingshotoff"))
                {
                    controller.getSettingsHandler().setKingShot(false);
                    controller.getDiskPanel().repaint();
                    controller.getMenuHandler().repaintShotImage();
                    controller.getMenuPanel().repaint();
                } else
                if(s.equalsIgnoreCase("zoomon"))
                {
                    controller.getSettingsHandler().setZoomMode(true);
                    controller.getDiskPanel().repaint();
                } else
                if(s.equalsIgnoreCase("zoomoff"))
                {
                    controller.getSettingsHandler().setZoomMode(false);
                    controller.getDiskPanel().repaint();
                } else
                if(s.equalsIgnoreCase("zehntelshoton"))
                {
                    controller.getSettingsHandler().setZehntelShot(true);
                    repaintMenu(controller);
                } else
                if(s.equalsIgnoreCase("zehntelshotoff"))
                {
                    controller.getSettingsHandler().setZehntelShot(false);
                    repaintMenu(controller);
                } else
                if(s.equalsIgnoreCase("zehntelsummeon"))
                {
                    controller.getSettingsHandler().setZehntelSum(true);
                    repaintMenu(controller);
                } else
                if(s.equalsIgnoreCase("abweichungoff"))
                {
                    controller.getSettingsHandler().setShowAbweichung(false);
                    controller.getMenuPanel().repaint();
                    controller.getDiskPanel().repaint();
                } else
                if(s.equalsIgnoreCase("abweichungon"))
                {
                    controller.getSettingsHandler().setShowAbweichung(true);
                    controller.getMenuPanel().repaint();
                    controller.getDiskPanel().repaint();
                } else
                if(s.equalsIgnoreCase("umkreisoff"))
                {
                    controller.getSettingsHandler().setShowMinUmkreis(false);
                    controller.getMenuPanel().repaint();
                    controller.getDiskPanel().repaint();
                } else
                if(s.equalsIgnoreCase("umkreison"))
                {
                    controller.getSettingsHandler().setShowMinUmkreis(true);
                    controller.getMenuPanel().repaint();
                    controller.getDiskPanel().repaint();
                } else
                if(s.equalsIgnoreCase("zehntelsummeoff"))
                {
                    controller.getSettingsHandler().setZehntelSum(false);
                    repaintMenu(controller);
                } else
                if(s.equalsIgnoreCase("showteileron"))
                {
                    controller.getSettingsHandler().setShowTeiler(true);
                    repaintMenu(controller);
                } else
                if(s.equalsIgnoreCase("showteileroff"))
                {
                    controller.getSettingsHandler().setShowTeiler(false);
                    repaintMenu(controller);
                } else
                if(s.equalsIgnoreCase("showxyoff"))
                {
                    controller.getSettingsHandler().setShowXY(false);
                    repaintMenu(controller);
                } else
                if(s.equalsIgnoreCase("showxyon"))
                {
                    controller.getSettingsHandler().setShowXY(true);
                    repaintMenu(controller);
                } else
                if(s.equalsIgnoreCase("reset_standfixed"))
                {
                    controller.getSettingsHandler().setStandPlatzCounter(0);
                    Ressorcen.saveSettings();
                } else
                if(s.equalsIgnoreCase("get_all_shots"))
                    OSConnection.returnAllShots();
                else
                if(s.equalsIgnoreCase("get_status"))
                    OSConnection.sendStatus();
                else
                if(s.equalsIgnoreCase("get_settings"))
                    OSConnection.sendSettings();
                else
                if(s.equalsIgnoreCase("shutdownnow"))
                    controller.getSiz().shutDown();
                else
                if(s.equalsIgnoreCase("edit_shot"))
                    controller.getShotHandler().updateShot(((String)attribute.get("shot")).toString(), ((String)attribute.get("valid")).toString());
                else
                if(s.equalsIgnoreCase("osupdate"))
                    controller.getRs232().doUpdate(true);
            }
        }
        controller.getMessages().setPopupMessageRepaint(null);
    }

    public static void repaintMenu(Controller controller)
    {
        ShotHandler.calcCharakteristiken();
        controller.getMenuHandler().repaintMenuImage();
        controller.getMenuPanel().repaint();
        controller.getDiskPanel().repaint();
    }

    private static Hashtable attribute = new Hashtable();
    private static final Pattern attributePattern = Pattern.compile("[a-zA-Z0-9]+.?[=]{1}.?[\"]+[^=]*[\"]+");

}
