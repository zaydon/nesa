
package siz.servercom;

import java.io.*;
import java.net.Socket;
import java.util.Vector;
import siz.*;
import siz.disk.Disk;
import siz.menu.MenuItem;

// Referenced classes of package siz.servercom:
//            ServerMSGSender, ServerMsgHandling

public class OSConnection
    implements Runnable
{

    public OSConnection(Controller controller)
    {
        serverip = Ressorcen.get("serverip", "127.0.0.1");
        socketOpen = false;
        running = false;
        msgSender = null;
        co = controller;
        running = true;
        (new Thread(this)).start();
    }

    public Vector getMSGToServerVector()
    {
        return msgToSendVector;
    }

    public void openConnection()
    {
        if(socketOpen)
            return;
        try
        {
            if(null != msgSender)
                msgSender.close();
            socket = new Socket(serverip, port);
            msgSender = new ServerMSGSender(new PrintStream(socket.getOutputStream()), this);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            socketOpen = true;
            co.getSettingsHandler().setConnectedToServer(true);
            sendMsg((new StringBuilder()).append("<message shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\">welcome, here i am</message>").toString());
        }
        catch(IOException ioexception)
        {
            co.getSettingsHandler().setConnectedToServer(false);
            socketOpen = false;
            closeConnection();
            try
            {
                Thread.sleep(500L);
            }
            catch(InterruptedException interruptedexception) { }
        }
        if(null != co.getDiskPanel() && socketOpen)
            co.getDiskPanel().repaint();
    }

    public static void sendMsg(String s)
    {
        msgToSendVector.addElement(s);
    }

    public void run()
    {
        char ac[];
        StringBuffer stringbuffer;
        boolean flag = false;
        ac = new char[1024];
        stringbuffer = new StringBuffer();
        boolean flag1 = false;
_L1:
        if(!running)
            break MISSING_BLOCK_LABEL_369;
        openConnection();
        int i;
        while(null != in && (i = in.read(ac)) != -1) 
        {
            stringbuffer.append(ac, 0, i);
            Log.debug("OSConnection", (new StringBuilder()).append("MessageBuffer: ").append(stringbuffer.toString()).toString());
            try
            {
                int j = stringbuffer.length();
                while((stringbuffer = ServerMsgHandling.getServerMsg(co, stringbuffer)).length() != j) 
                    j = stringbuffer.length();
            }
            catch(Exception exception)
            {
                Log.error("OSConnection", (new StringBuilder()).append("Fehler beim Parsen der Nachricht: ").append(stringbuffer.toString()).toString(), exception);
            }
        }
        if(co.getSettingsHandler().isConnectedToServer())
        {
            Log.debug("OSConnection", "Verbindung zum Server verloren...");
            co.getSettingsHandler().setConnectedToServer(false);
            if(null != co.getDiskPanel())
                co.getDiskPanel().repaint();
        }
        socketOpen = false;
        closeConnection();
          goto _L1
        Exception exception1;
        exception1;
        Log.warn("OSConnection", (new StringBuilder()).append("Verbindungsfehler: ").append(exception1.toString()).toString());
        if(co.getSettingsHandler().isConnectedToServer())
        {
            Log.debug("OSConnection", "Verbindung zum Server verloren...");
            co.getSettingsHandler().setConnectedToServer(false);
            if(null != co.getDiskPanel())
                co.getDiskPanel().repaint();
        }
        socketOpen = false;
        closeConnection();
          goto _L1
        Exception exception2;
        exception2;
        if(co.getSettingsHandler().isConnectedToServer())
        {
            Log.debug("OSConnection", "Verbindung zum Server verloren...");
            co.getSettingsHandler().setConnectedToServer(false);
            if(null != co.getDiskPanel())
                co.getDiskPanel().repaint();
        }
        socketOpen = false;
        closeConnection();
        throw exception2;
    }

    public static void setRahmenClean(boolean flag, int ai[])
    {
        if(!flag)
        {
            String s;
            if(null == ai)
            {
                s = (new StringBuilder()).append("<command shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\">rahmenfehler</command>").toString();
            } else
            {
                s = (new StringBuilder()).append("<oslongstate shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\" ").append("state=\"").append(ai[0]).append("\" ").append("xpos=\"").append(ai[1]).append("\" ").append("xlevel=\"").append(ai[2]).append("\" ").append("ypos=\"").append(ai[3]).append("\" ").append("ylevel=\"").append(ai[4]).append("\"/>").toString();
                if(co.getSettingsHandler().isShowOSCleanState())
                    co.getSettingsHandler().setOpticScoreState(ai);
            }
            sendMsg(s);
            co.getDiskPanel().repaint();
        }
    }

    public static void setHotMode()
    {
        String s = (new StringBuilder()).append("<command shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\" menuID=\"").append(co.getSequenzHandler().getMenuID()).append("\">changed_to_hotmode</command>").toString();
        sendMsg(s);
    }

    public static void setCompetitionFinished()
    {
        String s = (new StringBuilder()).append("<command shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\" menuID=\"").append(co.getSequenzHandler().getMenuID()).append("\">competition_finished</command>").toString();
        sendMsg(s);
    }

    public static void setCleanUpAfterCompetition()
    {
        String s = (new StringBuilder()).append("<command shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\" menuID=\"").append(co.getSequenzHandler().getMenuID()).append("\">cleanup_after_competition</command>").toString();
        sendMsg(s);
    }

    public static void setCompetitionStoptByUser()
    {
        String s = (new StringBuilder()).append("<command shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\" menuID=\"").append(co.getSequenzHandler().getMenuID()).append("\">competition_stoped</command>").toString();
        sendMsg(s);
    }

    public static void setCompetitionResumed()
    {
        String s = (new StringBuilder()).append("<command shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\" menuID=\"").append(co.getSequenzHandler().getMenuID()).append("\">competition_resumed</command>").toString();
        sendMsg(s);
    }

    public static void setSmartCardInsert()
    {
        String s = (new StringBuilder()).append("<command shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\">smartcard_insert</command>").toString();
        sendMsg(s);
    }

    public static void setSmartCardRemoved()
    {
        String s = (new StringBuilder()).append("<command shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\">smartcard_removed</command>").toString();
        sendMsg(s);
    }

    public static void setPreisschiessenLogedIn(boolean flag)
    {
        int ai[] = co.getSettingsHandler().getPreisschiessenUserCode();
        String s = (new StringBuilder()).append("").append(ai[0]).append("").append(ai[1]).append("").append(ai[2]).append("").append(ai[3]).toString();
        String s1 = (new StringBuilder()).append("<command shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\" code=\"").append(s).append("\">").append(flag ? "preisschiessen_logedin" : "preisschiessen_logedout").append("</command>").toString();
        sendMsg(s1);
    }

    public static void setWarmupMode()
    {
        String s = (new StringBuilder()).append("<command shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\" menuID=\"").append(co.getSequenzHandler().getMenuID()).append("\">changed_to_warmup</command>").toString();
        sendMsg(s);
    }

    public static void sendZoomMode(boolean flag)
    {
        sendSettings();
    }

    public static void sendZentelShot(boolean flag)
    {
        sendSettings();
    }

    public static void sendZehntelSumme(boolean flag)
    {
        sendSettings();
    }

    public static void sendAbweichung(boolean flag)
    {
        sendSettings();
    }

    public static void sendMinUmkreis(boolean flag)
    {
        sendSettings();
    }

    public static void sendKingShot(boolean flag)
    {
        sendSettings();
    }

    public static void sendStatus()
    {
        if(null == co.getSequenzHandler())
        {
            return;
        } else
        {
            String s = (new StringBuilder()).append("<status menuItem=\"").append(co.getSequenzHandler().getMenuID()).append("\" ").append("isWarmup=\"").append(co.getSequenzHandler().isWarmRunning()).append("\" ").append("isHotmode=\"").append(co.getSequenzHandler().isHotRunning()).append("\" ").append("isPause=\"").append(co.getSequenzHandler().isPaused()).append("\" ").append("isLigaPause=\"").append(co.getSequenzHandler().isLigaPause()).append("\" ").append("isCompetitionFinished=\"").append(co.getSequenzHandler().isFinished()).append("\" ").append("isMaxShotsReached=\"").append(co.getSequenzHandler().maxShotsReached()).append("\" ").append("timeLeftLong=\"").append(co.getSequenzHandler().getTimeLeftLong()).append("\" ").append("shooterSID=\"").append(Shooter.getSid()).append("\" ").append("shooterName=\"").append(Shooter.getName()).append("\" ").append("shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\" ").append("diskTyp=\"").append(null == co.getSequenzHandler().getSelectedMenuItem() ? ((Object) (Integer.valueOf(1))) : ((Object) (co.getSequenzHandler().getSelectedMenuItem().getDiskName()))).append("\" ").append("shotcount=\"").append(co.getShotHandler().getToPaint().size() + ShotHandler.getBlocks() * 10 + 1).append("\" ").append("/>").toString();
            sendMsg(s);
            return;
        }
    }

    public static void sendSettings()
    {
        String s = (new StringBuilder()).append("<settings shooterSID=\"").append(Shooter.getSid()).append("\" ").append("shooterName=\"").append(Shooter.getName()).append("\" ").append("shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\" ").append("isServerMode=\"").append(co.getSettingsHandler().isServerMode()).append("\" ").append("isShowAbweichung=\"").append(co.getSettingsHandler().isShowAbweichung()).append("\" ").append("isShowMinUmkreis=\"").append(co.getSettingsHandler().isShowMinUmkreis()).append("\" ").append("isKingShot=\"").append(co.getSettingsHandler().isKingShot()).append("\" ").append("isSmartCardMode=\"").append(co.getSettingsHandler().isSmartCardMode()).append("\" ").append("isZehntelShot=\"").append(co.getSettingsHandler().getZehntelShot()).append("\" ").append("isZehntelSum=\"").append(co.getSettingsHandler().getZehntelSum()).append("\" ").append("isZoomMode=\"").append(co.getSettingsHandler().getZommMode()).append("\" ").append("standplatzCounter=\"").append(co.getSettingsHandler().getStandPlatzCounter()).append("\" ").append("/>").toString();
        sendMsg(s);
    }

    public static void returnAllShots()
    {
        Object obj = null;
        Vector vector = ShotHandler.getValidShots(true, false);
        Vector vector1 = ShotHandler.getValidShots(false, true);
        for(int i = 0; i < vector.size(); i++)
        {
            Shot shot = (Shot)vector.elementAt(i);
            sendShot(shot);
        }

        for(int j = 0; j < vector1.size(); j++)
        {
            Shot shot1 = (Shot)vector1.elementAt(j);
            sendShot(shot1);
        }

    }

    public static void sendShot(Shot shot)
    {
        String s = (new StringBuilder()).append("<shot shootingrange=\"").append(co.getSettingsHandler().getStandplatz()).append("\" ").append("shootersid=\"").append(Shooter.getSid()).append("\" ").append("shot=\"").append(shot.getShotID()).append("\" ").append("shotcount=\"").append(co.getShotHandler().getToPaint().size() + ShotHandler.getBlocks() * 10 + 1).append("\"").append(" isvalid=\"").append(shot.isValid()).append("\" ishot=\"").append(shot.isHot()).append("\" iswarm=\"").append(shot.isWarm()).append("\" x=\"").append(shot.getX()).append("\" y=\"").append(shot.getY()).append("\" teiler=\"").append(shot.getTeiler()).append("\" winkel=\"").append(shot.getWinkelGrad()).append("\" disktyp=\"").append(shot.getDisk().getName()).append("\" dummy=\"").append(shot.isDummy()).append("\" shotTime=\"").append(shot.getTime()).append("\" menuid=\"").append(co.getSequenzHandler().getMenuID()).append("\">").append(shot.getRing()).append("</shot>").toString();
        sendMsg(s);
    }

    public static void sendError(String s)
    {
        sendMsg((new StringBuilder()).append("<error>").append(s.replace("\"", "")).append("</error>").toString());
        sendSettings();
        sendStatus();
    }

    public void close()
    {
        Log.info("OSConnection", "Try to close Serverconnection.");
        running = false;
        closeConnection();
        Log.info("OSConnection", "Serverconnection closed");
    }

    public void closeConnection()
    {
        socketOpen = false;
        if(msgSender != null)
            try
            {
                msgSender.close();
            }
            catch(Exception exception)
            {
                exception.printStackTrace();
            }
        if(in != null)
            try
            {
                in.close();
                in = null;
            }
            catch(IOException ioexception)
            {
                ioexception.printStackTrace();
            }
        if(socket != null)
            try
            {
                socket.close();
                socket = null;
            }
            catch(IOException ioexception1)
            {
                ioexception1.printStackTrace();
            }
    }

    public final String getServerip()
    {
        return serverip;
    }

    public final void setServerip(String s)
    {
        serverip = s;
        closeConnection();
    }

    private String serverip;
    private final int port = Ressorcen.getAsInt("serverport", 7030);
    private static Vector msgToSendVector = new Vector(0);
    private boolean socketOpen;
    private boolean running;
    private static BufferedReader in = null;
    private ServerMSGSender msgSender;
    private static Socket socket = null;
    private static Controller co;

}
